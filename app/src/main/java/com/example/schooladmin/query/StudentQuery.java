package com.example.schooladmin.query;import android.content.Context;import android.content.Intent;import android.os.AsyncTask;import android.util.Log;import com.example.schooladmin.connectdb.ConnectDB;import com.example.schooladmin.model.ClassSchool;import com.example.schooladmin.model.Student;import java.sql.Connection;import java.sql.ResultSet;import java.sql.ResultSetMetaData;import java.sql.Statement;import java.util.ArrayList;import java.util.List;public class StudentQuery {    private List<Student> students = new ArrayList<>();    private List<Student> studentList = new ArrayList<>();    private List<ClassSchool> classes = new ArrayList<>();    private boolean isTrue = false;    private Context context;    public StudentQuery(Context context) {        this.context = context;    }    ///region student    public void setAllStudent(List<Student> students) {        this.students = students;    }    public List<Student> getAllStudents() {        return students;    }    public void callTaskGetAllStudent() {        new TaskGetAllStudent().execute( "" );    }    //endregion    ///region Class    public void setClasses(List<ClassSchool> classes) {        this.classes = classes;    }    public List<ClassSchool> getClasses() {        return classes;    }    public void callTaskGetClass() {        new TaskGetClass().execute( "" );    }    //endregion    ///region insert Student    public void callTaskInsertStudent(Student student) {        new TaskInsertStudent( student ).execute( "" );    }    public void setStateInsertStudent(boolean isTrue) {        this.isTrue = isTrue;    }    public boolean getStateInsertStudent() {        return isTrue;    }    //endregion    ///region get Student By Class    public void setStudentByClass(List<Student> studentList) {        this.studentList = studentList;    }    public List<Student> getStudentsByClass() {        return studentList;    }    public void callTaskSelectStudentByClassName(int classID) {        new TaskSelectStudentByClassName( classID ).execute( "" );    }    //endregion    //Task for get All Students    private class TaskGetAllStudent extends AsyncTask<String, String, List<Student>> {        String state = "";        boolean isSuccess = false;        @Override        protected List<Student> doInBackground(String... strings) {            List<Student> studentList = new ArrayList<>();            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT student.id , student.name , student.phone ,class.name\n" +                            "FROM student , class \n" +                            "WHERE student.classID=class.id";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        studentList.add( new Student( resultSet.getInt( 1 ), resultSet.getString( 2 ),                                resultSet.getString( 3 ), resultSet.getString( 4 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return studentList;        }        @Override        protected void onPostExecute(List<Student> students) {            Intent intent = new Intent( "studentList" );            context.sendBroadcast( intent );            if (isSuccess) {                setAllStudent( students );            }        }    }    //for get All Class    private class TaskGetClass extends AsyncTask<String, String, List<ClassSchool>> {        String state = "";        boolean isSuccess = false;        @Override        protected List<ClassSchool> doInBackground(String... strings) {            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "SELECT id ,name from class";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        classes.add( new ClassSchool( resultSet.getInt( 1 ), resultSet.getString( 2 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return classes;        }        @Override        protected void onPostExecute(List<ClassSchool> classSchoolList) {            Intent intent = new Intent( "classList" );            context.sendBroadcast( intent );            if (isSuccess) {                setClasses( classSchoolList );            }        }    }    //for Add Studenet    public class TaskInsertStudent extends AsyncTask<String, String, String> {        int idStudent;        boolean isSuccess = false;        String state = "";        Student student;        public TaskInsertStudent(Student student) {            this.student = student;        }        @Override        protected String doInBackground(String... strings) {            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String queryUserID = "select Max(id) from student";                    Statement stmt1 = connection.createStatement();                    ResultSet resultSet = stmt1.executeQuery( queryUserID );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        idStudent = Integer.parseInt( resultSet.getString( 1 ) ) + 1;                    }                    String query = "insert into student values('" + idStudent + "', '" + student.getName() + "'," +                            "'" + student.getPhone() + "','" + student.getPassword() + "' , '" + student.getClassID() + "')";                    Statement stmt = connection.createStatement();                    stmt.executeUpdate( query );                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return state;        }        @Override        protected void onPostExecute(String s) {            Intent intent = new Intent( "stateInsertStudent" );            context.sendBroadcast( intent );            if (isSuccess) {                setStateInsertStudent( isSuccess );            }        }    }    //for Get Student By class name    private class TaskSelectStudentByClassName extends AsyncTask<String, String, List<Student>> {        String state = "";        boolean isSuccess = false;        int classID ;        public TaskSelectStudentByClassName(int classID) {            this.classID = classID;        }        @Override        protected List<Student> doInBackground(String... strings) {            List<Student> studentList = new ArrayList<>();            ;            try {                ConnectDB connectDB = new ConnectDB();                Connection connection = connectDB.CONN();                if (connection == null) {                } else {                    String query = "select student.id , student.name , student.phone ,class.name\n" +                            "from student , class \n" +                            "where (student.classID=class.id) AND (student.classID = '" + classID + "')";                    Statement stmt = connection.createStatement();                    ResultSet resultSet = stmt.executeQuery( query );                    ResultSetMetaData resultSetMetaData = resultSet.getMetaData();                    while (resultSet.next()) {                        studentList.add( new Student( resultSet.getInt( 1 ), resultSet.getString( 2 ),                                resultSet.getString( 3 ), resultSet.getString( 4 ) ) );                    }                    isSuccess = true;                }            } catch (Exception ex) {                isSuccess = false;                state = "Exceptions" + ex;            }            return studentList;        }        @Override        protected void onPostExecute(List<Student> students) {            Intent intent = new Intent( "listStudentByClass" );            context.sendBroadcast( intent );            if (isSuccess) {                setStudentByClass( students );                Log.d( "studenClass", students.size() + "" );            }        }    }}